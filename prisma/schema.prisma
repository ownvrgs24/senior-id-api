// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model senior_citizen_details {
  recno                    Int                @id @default(autoincrement())
  record_id                String             @unique @default(uuid())
  id_number                String             @unique
  first_name               String
  middle_name              String?
  last_name                String
  suffix                   String?
  age_upon_release         Int
  full_address             String
  sex_at_birth             SEX_AT_BIRTH_ENUM?
  date_of_birth            DateTime           @db.Date
  place_of_birth           String?
  civil_status             CIVIL_STATUS_ENUM?
  contact_number           String?
  emergency_contact_name   String?
  emergency_contact_number String?
  emergency_relationship   String?
  email                    String?
  created_at               DateTime           @default(now())
  updated_at               DateTime           @default(now()) @updatedAt @db.Timestamp(6)

  client_credential_assets client_credential_assets?
  date_of_issuance         DateTime                  @db.Date
}

model client_credential_assets {
  recno                  Int                     @id @default(autoincrement())
  record_id              String                  @unique @default(uuid())
  profile_picture        String
  electronic_signature   String?
  thumbprint             String?
  remarks                String?
  created_at             DateTime                @default(now())
  updated_at             DateTime                @updatedAt
  senior_citizen_details senior_citizen_details? @relation(fields: [record_id], references: [record_id], onDelete: Cascade)
}

enum SEX_AT_BIRTH_ENUM {
  FEMALE
  MALE
  OTHER
}

enum CIVIL_STATUS_ENUM {
  SINGLE
  MARRIED
  WIDOWED
  SEPARATED
  DIVORCED
  ANNULLED
}
