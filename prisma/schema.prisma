// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model senior_citizen_details {
  recno                              Int                                  @id @default(autoincrement())
  record_id                          String                               @unique @default(uuid())
  first_name                         String
  middle_name                        String?
  last_name                          String
  suffix                             String?
  age_upon_release                   Int
  full_address                       String
  sex_at_birth                       SEX_AT_BIRTH_ENUM
  date_of_birth                      DateTime                             @db.Date
  place_of_birth                     String?
  civil_status                       CIVIL_STATUS_ENUM
  contact_number                     String?
  email                              String?
  created_at                         DateTime                             @default(now())
  updated_at                         DateTime                             @updatedAt
  client_credential_assets           client_credential_assets?
  senior_identifier_registry         senior_identifier_registry?
  senior_citizen_incase_of_emergency senior_citizen_incase_of_emergency[]
}

model client_credential_assets {
  recno                  Int                     @id @default(autoincrement())
  record_id              String                  @unique @default(uuid())
  profile_picture        String
  electronic_signature   String
  left_thumbprint        String?
  right_thumbprint       String?
  remarks                String?
  created_at             DateTime                @default(now())
  updated_at             DateTime                @updatedAt
  senior_citizen_details senior_citizen_details? @relation(fields: [record_id], references: [record_id], onDelete: Cascade)
}

model senior_identifier_registry {
  recno                  Int                     @id @default(autoincrement())
  record_id              String                  @unique @default(uuid())
  date_of_issuance       DateTime                @db.Date
  reference_number       String?
  created_at             DateTime                @default(now())
  updated_at             DateTime                @updatedAt
  senior_citizen_details senior_citizen_details? @relation(fields: [record_id], references: [record_id], onDelete: Cascade)
}

model senior_citizen_incase_of_emergency {
  recno                  Int                     @id @default(autoincrement())
  record_id              String                  @default(uuid())
  first_name             String
  middle_name            String?
  last_name              String
  suffix                 String?
  contact_number         String?
  email                  String?
  relationship_to_senior String?
  created_at             DateTime                @default(now())
  updated_at             DateTime                @updatedAt
  senior_citizen_details senior_citizen_details? @relation(fields: [record_id], references: [record_id], onDelete: Cascade)
}

enum SEX_AT_BIRTH_ENUM {
  FEMALE
  MALE
  OTHER
}

enum CIVIL_STATUS_ENUM {
  SINGLE
  MARRIED
  WIDOWED
  SEPARATED
  DIVORCED
  ANNULLED
}
